// file: app/api/analyze/route.ts
import { NextResponse } from 'next/server';
import { spawn } from 'child_process';
import fs from 'fs/promises';
import path from 'path';
import os from 'os';

export async function POST(request: Request) {
    let tempDir: string | null = null;
    try {
        const formData = await request.formData();
        const files = formData.getAll('replays') as File[];

        if (!files || files.length === 0) {
            return NextResponse.json({ error: '–§–∞–π–ª–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ' }, { status: 400 });
        }

        tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'wot-replays-'));

        for (const file of files) {
            const buffer = Buffer.from(await file.arrayBuffer());
            await fs.writeFile(path.join(tempDir, file.name), buffer);
        }

        // FIX 1: –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —â–æ–± –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏ TypeScript, —â–æ tempDir –Ω–µ —î null
        if (!tempDir) {
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—É —Ç–µ–∫—É.");
        }

        const results = await new Promise((resolve, reject) => {
            const pythonExecutable = 'python3';
            const scriptPath = path.resolve('./scripts/parser.py');

            console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–∫—Ä–∏–ø—Ç: ${pythonExecutable} ${scriptPath} ${tempDir}`);

            // –¢–µ–ø–µ—Ä TypeScript –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —â–æ tempDir - —Ü–µ —Ä—è–¥–æ–∫ (string)
            const pythonProcess = spawn(pythonExecutable, [scriptPath, tempDir]);

            let stdout = '';
            let stderr = '';

            // FIX 2: –í–∫–∞–∑—É—î–º–æ —Ç–∏–ø `Buffer` –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ data
            pythonProcess.stdout.on('data', (data: Buffer) => {
                stdout += data.toString();
            });

            // FIX 2: –í–∫–∞–∑—É—î–º–æ —Ç–∏–ø `Buffer` –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ data
            pythonProcess.stderr.on('data', (data: Buffer) => {
                console.error(`PYTHON STDERR: ${data.toString()}`);
                stderr += data.toString();
            });

            pythonProcess.on('close', (code) => {
                console.log(`üêç Python-—Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –∫–æ–¥–æ–º: ${code}`);
                console.log(`STDOUT: ${stdout.slice(0, 200)}...`);

                if (code === 0) {
                    try {
                        resolve(JSON.parse(stdout));
                    } catch (e) {
                        reject(new Error('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –∑ Python. –ú–æ–∂–ª–∏–≤–æ, –≤–∏–≤—ñ–¥ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π.'));
                    }
                } else {
                    reject(new Error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è Python-—Å–∫—Ä–∏–ø—Ç–∞: ${stderr}`));
                }
            });

            pythonProcess.on('error', (err) => {
                console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ—Ü–µ—Å—É Python:", err);
                // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∑ 'python', —è–∫—â–æ 'python3' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                if ((err as any).code === 'ENOENT') {
                    reject(new Error(`–ö–æ–º–∞–Ω–¥—É '${pythonExecutable}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ Python —ñ —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤—ñ–Ω —É —Å–∏—Å—Ç–µ–º–Ω–æ–º—É PATH —è–∫ 'python3' –∞–±–æ 'python'.`));
                } else {
                    reject(new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Python: ${err.message}`));
                }
            });
        });

        return NextResponse.json(results);

    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ —Å–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞';
        console.error("SERVER ERROR:", errorMessage);
        return NextResponse.json({ error: errorMessage }, { status: 500 });
    } finally {
        if (tempDir) {
            await fs.rm(tempDir, { recursive: true, force: true });
        }
    }
}